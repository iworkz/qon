/*
 * generated by Xtext
 */
package org.iworkz.qon.scoping

import com.google.inject.Inject
import org.eclipse.emf.ecore.EReference
import org.eclipse.xtext.scoping.IScope
import org.eclipse.xtext.scoping.Scopes
import org.eclipse.xtext.scoping.impl.AbstractDeclarativeScopeProvider
import org.iworkz.qon.helper.SchemaHelper
import org.iworkz.qon.naming.QonSimpleNameProvider
import org.iworkz.qon.qonDsl.QObject
import org.iworkz.qon.qonDsl.QObjectArrayProperty

/**
 * This class contains custom scoping description.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#scoping
 * on how and when to use it.
 *
 */
class QonDslScopeProvider extends AbstractDeclarativeScopeProvider {
	
	@Inject
	QonSimpleNameProvider nameProvider

	@Inject
	var extension SchemaHelper schemaHelper

	def IScope scope_QObject_type(QObject it, EReference eRef) {
		val schema = getSchemaObject
		if (schema != null) {
			for (attr : schema.properties) {
				if (attr instanceof QObjectArrayProperty) {
					if ("types" == attr.propertyName) {
						val result = Scopes::scopeFor(attr.values,nameProvider,IScope.NULLSCOPE)
						return result
					}
				}
			}
		}
		return null
	}

}
