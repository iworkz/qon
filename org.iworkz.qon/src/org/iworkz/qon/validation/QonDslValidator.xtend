/*
 * generated by Xtext
 */
package org.iworkz.qon.validation

import com.google.inject.Inject
import org.eclipse.xtext.validation.Check
import org.iworkz.qon.helper.PropertyHelper
import org.iworkz.qon.helper.SchemaHelper
import org.iworkz.qon.qonDsl.QProperty
import org.iworkz.qon.qonDsl.QonDslPackage
import org.iworkz.qon.qonDsl.QLinkObjectProperty
import org.iworkz.qon.qonDsl.QObject
import org.iworkz.qon.qonDsl.QObjectProperty
import org.iworkz.qon.qonDsl.QObjectArrayProperty

/**
 * This class contains custom validation rules. 
 *
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation
 */
class QonDslValidator extends AbstractQonDslValidator {

	@Inject
	var extension PropertyHelper
	
	@Inject
	var extension SchemaHelper

	@Check
	def checkPropertyName(QProperty it) {
		val nameToCheck = propertyName
		val objectType = getObjectType
		if (objectType != null) {
			val properties = objectType.schemaProperties
			if (properties != null) {
				for (prop : properties) {
					val nameAttribute = prop.getStringProperty("name")
					if (nameAttribute != null && nameAttribute == nameToCheck) {
						return
					}
				}
			}
			error('Invalid property name', it,
				QonDslPackage.Literals.QPROPERTY__PROPERTY_NAME)

		}
	}
	
	@Check
	def checkLinkPropertyType(QProperty it) {
		if (it instanceof QLinkObjectProperty) {
			val objectType = getObjectType
			if (objectType != null) {
				val schemaPropertyType = objectType.getSchemaPropertyType(propertyName)	
				if (schemaPropertyType instanceof QLinkObjectProperty) {
					if (link.type.isObjectInstanceOf(schemaPropertyType.link)) {
						return
					} else {
						error('Invalid property type', it,
							QonDslPackage.Literals.QPROPERTY__PROPERTY_NAME)
					}
				}
			}
		}
	}
	
	@Check
	def checkObjectPropertyType(QProperty it) {
		if (it instanceof QObjectProperty) {
			val objectType = getObjectType
			if (objectType != null) {
				val schemaPropertyType = objectType.getSchemaPropertyType(propertyName)	
				if (schemaPropertyType instanceof QLinkObjectProperty) {
					if (value.type.isObjectInstanceOf(schemaPropertyType.link)) {
						return
					} else {
						error('Invalid property type', it,
							QonDslPackage.Literals.QPROPERTY__PROPERTY_NAME)
					}
				}
			}
		}
	}
	
	@Check
	def checkObjectArrayPropertyType(QProperty it) {
		if (it instanceof QObjectArrayProperty) {
			val objectType = getObjectType
			if (objectType != null) {
				val schemaPropertyType = objectType.getSchemaPropertyType(propertyName)	
				if (schemaPropertyType instanceof QLinkObjectProperty) {
					for (value:values) {
						if (value.type.isObjectInstanceOf(schemaPropertyType.link) == false) {
							error('Invalid object type', value,
								QonDslPackage.Literals.QOBJECT__TYPE)
						}
					}
				}
			}
		}
	}
	
	def boolean isObjectInstanceOf(QObject it, QObject type) {
		if (equals(type)) {
			return true
		}
		val baseType = getReferencedObjectProperty("extends")
		if (baseType != null) {
			return baseType.isObjectInstanceOf(type)
		}
		return false
	}

}
