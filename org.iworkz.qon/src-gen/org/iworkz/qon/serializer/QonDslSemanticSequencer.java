/*
 * generated by Xtext
 */
package org.iworkz.qon.serializer;

import com.google.inject.Inject;
import com.google.inject.Provider;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.serializer.acceptor.ISemanticSequenceAcceptor;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.diagnostic.ISemanticSequencerDiagnosticProvider;
import org.eclipse.xtext.serializer.diagnostic.ISerializationDiagnostic.Acceptor;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.GenericSequencer;
import org.eclipse.xtext.serializer.sequencer.ISemanticNodeProvider.INodesForEObjectProvider;
import org.eclipse.xtext.serializer.sequencer.ISemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.iworkz.qon.qonDsl.BooleanValue;
import org.iworkz.qon.qonDsl.Import;
import org.iworkz.qon.qonDsl.ImportProperty;
import org.iworkz.qon.qonDsl.NamespaceProperty;
import org.iworkz.qon.qonDsl.QBooleanValueProperty;
import org.iworkz.qon.qonDsl.QEmptyArrayProperty;
import org.iworkz.qon.qonDsl.QLinkArrayProperty;
import org.iworkz.qon.qonDsl.QLinkObjectProperty;
import org.iworkz.qon.qonDsl.QNullValueProperty;
import org.iworkz.qon.qonDsl.QNumberArrayProperty;
import org.iworkz.qon.qonDsl.QNumberValueProperty;
import org.iworkz.qon.qonDsl.QObject;
import org.iworkz.qon.qonDsl.QObjectArrayProperty;
import org.iworkz.qon.qonDsl.QObjectProperty;
import org.iworkz.qon.qonDsl.QStringArrayProperty;
import org.iworkz.qon.qonDsl.QStringValueProperty;
import org.iworkz.qon.qonDsl.QonDslPackage;
import org.iworkz.qon.qonDsl.SchemaProperty;
import org.iworkz.qon.services.QonDslGrammarAccess;

@SuppressWarnings("all")
public class QonDslSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private QonDslGrammarAccess grammarAccess;
	
	@Override
	public void createSequence(EObject context, EObject semanticObject) {
		if(semanticObject.eClass().getEPackage() == QonDslPackage.eINSTANCE) switch(semanticObject.eClass().getClassifierID()) {
			case QonDslPackage.BOOLEAN_VALUE:
				sequence_BooleanValue(context, (BooleanValue) semanticObject); 
				return; 
			case QonDslPackage.IMPORT:
				sequence_Import(context, (Import) semanticObject); 
				return; 
			case QonDslPackage.IMPORT_PROPERTY:
				sequence_ImportProperty(context, (ImportProperty) semanticObject); 
				return; 
			case QonDslPackage.NAMESPACE_PROPERTY:
				sequence_NamespaceProperty(context, (NamespaceProperty) semanticObject); 
				return; 
			case QonDslPackage.QBOOLEAN_VALUE_PROPERTY:
				sequence_QBooleanValueProperty(context, (QBooleanValueProperty) semanticObject); 
				return; 
			case QonDslPackage.QEMPTY_ARRAY_PROPERTY:
				sequence_QEmptyArrayProperty(context, (QEmptyArrayProperty) semanticObject); 
				return; 
			case QonDslPackage.QLINK_ARRAY_PROPERTY:
				sequence_QLinkArrayProperty(context, (QLinkArrayProperty) semanticObject); 
				return; 
			case QonDslPackage.QLINK_OBJECT_PROPERTY:
				sequence_QLinkObjectProperty(context, (QLinkObjectProperty) semanticObject); 
				return; 
			case QonDslPackage.QNULL_VALUE_PROPERTY:
				sequence_QNullValueProperty(context, (QNullValueProperty) semanticObject); 
				return; 
			case QonDslPackage.QNUMBER_ARRAY_PROPERTY:
				sequence_QNumberArrayProperty(context, (QNumberArrayProperty) semanticObject); 
				return; 
			case QonDslPackage.QNUMBER_VALUE_PROPERTY:
				sequence_QNumberValueProperty(context, (QNumberValueProperty) semanticObject); 
				return; 
			case QonDslPackage.QOBJECT:
				if(context == grammarAccess.getQObjectRule()) {
					sequence_QObject(context, (QObject) semanticObject); 
					return; 
				}
				else if(context == grammarAccess.getQRootRule()) {
					sequence_QRoot(context, (QObject) semanticObject); 
					return; 
				}
				else break;
			case QonDslPackage.QOBJECT_ARRAY_PROPERTY:
				sequence_QObjectArrayProperty(context, (QObjectArrayProperty) semanticObject); 
				return; 
			case QonDslPackage.QOBJECT_PROPERTY:
				sequence_QObjectProperty(context, (QObjectProperty) semanticObject); 
				return; 
			case QonDslPackage.QSTRING_ARRAY_PROPERTY:
				sequence_QStringArrayProperty(context, (QStringArrayProperty) semanticObject); 
				return; 
			case QonDslPackage.QSTRING_VALUE_PROPERTY:
				sequence_QStringValueProperty(context, (QStringValueProperty) semanticObject); 
				return; 
			case QonDslPackage.SCHEMA_PROPERTY:
				sequence_SchemaProperty(context, (SchemaProperty) semanticObject); 
				return; 
			}
		if (errorAcceptor != null) errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Constraint:
	 *     (true?='true' | false?='false')
	 */
	protected void sequence_BooleanValue(EObject context, BooleanValue semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     ((values+=Import values+=Import*)?)
	 */
	protected void sequence_ImportProperty(EObject context, ImportProperty semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     importedNamespace=STRING
	 */
	protected void sequence_Import(EObject context, Import semanticObject) {
		if(errorAcceptor != null) {
			if(transientValues.isValueTransient(semanticObject, QonDslPackage.Literals.IMPORT__IMPORTED_NAMESPACE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, QonDslPackage.Literals.IMPORT__IMPORTED_NAMESPACE));
		}
		INodesForEObjectProvider nodes = createNodeProvider(semanticObject);
		SequenceFeeder feeder = createSequencerFeeder(semanticObject, nodes);
		feeder.accept(grammarAccess.getImportAccess().getImportedNamespaceSTRINGTerminalRuleCall_0(), semanticObject.getImportedNamespace());
		feeder.finish();
	}
	
	
	/**
	 * Constraint:
	 *     value=STRING
	 */
	protected void sequence_NamespaceProperty(EObject context, NamespaceProperty semanticObject) {
		if(errorAcceptor != null) {
			if(transientValues.isValueTransient(semanticObject, QonDslPackage.Literals.NAMESPACE_PROPERTY__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, QonDslPackage.Literals.NAMESPACE_PROPERTY__VALUE));
		}
		INodesForEObjectProvider nodes = createNodeProvider(semanticObject);
		SequenceFeeder feeder = createSequencerFeeder(semanticObject, nodes);
		feeder.accept(grammarAccess.getNamespacePropertyAccess().getValueSTRINGTerminalRuleCall_2_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Constraint:
	 *     (propertyName=ID value=BooleanValue)
	 */
	protected void sequence_QBooleanValueProperty(EObject context, QBooleanValueProperty semanticObject) {
		if(errorAcceptor != null) {
			if(transientValues.isValueTransient(semanticObject, QonDslPackage.Literals.QPROPERTY__PROPERTY_NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, QonDslPackage.Literals.QPROPERTY__PROPERTY_NAME));
			if(transientValues.isValueTransient(semanticObject, QonDslPackage.Literals.QBOOLEAN_VALUE_PROPERTY__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, QonDslPackage.Literals.QBOOLEAN_VALUE_PROPERTY__VALUE));
		}
		INodesForEObjectProvider nodes = createNodeProvider(semanticObject);
		SequenceFeeder feeder = createSequencerFeeder(semanticObject, nodes);
		feeder.accept(grammarAccess.getQBooleanValuePropertyAccess().getPropertyNameIDTerminalRuleCall_0_0(), semanticObject.getPropertyName());
		feeder.accept(grammarAccess.getQBooleanValuePropertyAccess().getValueBooleanValueParserRuleCall_2_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Constraint:
	 *     propertyName=ID
	 */
	protected void sequence_QEmptyArrayProperty(EObject context, QEmptyArrayProperty semanticObject) {
		if(errorAcceptor != null) {
			if(transientValues.isValueTransient(semanticObject, QonDslPackage.Literals.QPROPERTY__PROPERTY_NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, QonDslPackage.Literals.QPROPERTY__PROPERTY_NAME));
		}
		INodesForEObjectProvider nodes = createNodeProvider(semanticObject);
		SequenceFeeder feeder = createSequencerFeeder(semanticObject, nodes);
		feeder.accept(grammarAccess.getQEmptyArrayPropertyAccess().getPropertyNameIDTerminalRuleCall_0_0(), semanticObject.getPropertyName());
		feeder.finish();
	}
	
	
	/**
	 * Constraint:
	 *     (propertyName=ID (links+=[QObject|STRING] links+=[QObject|STRING]*)?)
	 */
	protected void sequence_QLinkArrayProperty(EObject context, QLinkArrayProperty semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (propertyName=ID link=[QObject|STRING])
	 */
	protected void sequence_QLinkObjectProperty(EObject context, QLinkObjectProperty semanticObject) {
		if(errorAcceptor != null) {
			if(transientValues.isValueTransient(semanticObject, QonDslPackage.Literals.QPROPERTY__PROPERTY_NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, QonDslPackage.Literals.QPROPERTY__PROPERTY_NAME));
			if(transientValues.isValueTransient(semanticObject, QonDslPackage.Literals.QLINK_OBJECT_PROPERTY__LINK) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, QonDslPackage.Literals.QLINK_OBJECT_PROPERTY__LINK));
		}
		INodesForEObjectProvider nodes = createNodeProvider(semanticObject);
		SequenceFeeder feeder = createSequencerFeeder(semanticObject, nodes);
		feeder.accept(grammarAccess.getQLinkObjectPropertyAccess().getPropertyNameIDTerminalRuleCall_0_0(), semanticObject.getPropertyName());
		feeder.accept(grammarAccess.getQLinkObjectPropertyAccess().getLinkQObjectSTRINGTerminalRuleCall_3_0_1(), semanticObject.getLink());
		feeder.finish();
	}
	
	
	/**
	 * Constraint:
	 *     propertyName=ID
	 */
	protected void sequence_QNullValueProperty(EObject context, QNullValueProperty semanticObject) {
		if(errorAcceptor != null) {
			if(transientValues.isValueTransient(semanticObject, QonDslPackage.Literals.QPROPERTY__PROPERTY_NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, QonDslPackage.Literals.QPROPERTY__PROPERTY_NAME));
		}
		INodesForEObjectProvider nodes = createNodeProvider(semanticObject);
		SequenceFeeder feeder = createSequencerFeeder(semanticObject, nodes);
		feeder.accept(grammarAccess.getQNullValuePropertyAccess().getPropertyNameIDTerminalRuleCall_0_0(), semanticObject.getPropertyName());
		feeder.finish();
	}
	
	
	/**
	 * Constraint:
	 *     (propertyName=ID values+=Number values+=Number*)
	 */
	protected void sequence_QNumberArrayProperty(EObject context, QNumberArrayProperty semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (propertyName=ID value=Number)
	 */
	protected void sequence_QNumberValueProperty(EObject context, QNumberValueProperty semanticObject) {
		if(errorAcceptor != null) {
			if(transientValues.isValueTransient(semanticObject, QonDslPackage.Literals.QPROPERTY__PROPERTY_NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, QonDslPackage.Literals.QPROPERTY__PROPERTY_NAME));
			if(transientValues.isValueTransient(semanticObject, QonDslPackage.Literals.QNUMBER_VALUE_PROPERTY__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, QonDslPackage.Literals.QNUMBER_VALUE_PROPERTY__VALUE));
		}
		INodesForEObjectProvider nodes = createNodeProvider(semanticObject);
		SequenceFeeder feeder = createSequencerFeeder(semanticObject, nodes);
		feeder.accept(grammarAccess.getQNumberValuePropertyAccess().getPropertyNameIDTerminalRuleCall_0_0(), semanticObject.getPropertyName());
		feeder.accept(grammarAccess.getQNumberValuePropertyAccess().getValueNumberParserRuleCall_2_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Constraint:
	 *     (propertyName=ID values+=QObject values+=QObject*)
	 */
	protected void sequence_QObjectArrayProperty(EObject context, QObjectArrayProperty semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (propertyName=ID value=QObject)
	 */
	protected void sequence_QObjectProperty(EObject context, QObjectProperty semanticObject) {
		if(errorAcceptor != null) {
			if(transientValues.isValueTransient(semanticObject, QonDslPackage.Literals.QPROPERTY__PROPERTY_NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, QonDslPackage.Literals.QPROPERTY__PROPERTY_NAME));
			if(transientValues.isValueTransient(semanticObject, QonDslPackage.Literals.QOBJECT_PROPERTY__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, QonDslPackage.Literals.QOBJECT_PROPERTY__VALUE));
		}
		INodesForEObjectProvider nodes = createNodeProvider(semanticObject);
		SequenceFeeder feeder = createSequencerFeeder(semanticObject, nodes);
		feeder.accept(grammarAccess.getQObjectPropertyAccess().getPropertyNameIDTerminalRuleCall_0_0(), semanticObject.getPropertyName());
		feeder.accept(grammarAccess.getQObjectPropertyAccess().getValueQObjectParserRuleCall_2_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Constraint:
	 *     (type=[QObject|ID]? properties+=QProperty*)
	 */
	protected void sequence_QObject(EObject context, QObject semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (type=[QObject|ID]? systemProperties+=QSystemProperty* properties+=QProperty*)
	 */
	protected void sequence_QRoot(EObject context, QObject semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (propertyName=ID values+=STRING values+=STRING*)
	 */
	protected void sequence_QStringArrayProperty(EObject context, QStringArrayProperty semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (propertyName=ID value=STRING)
	 */
	protected void sequence_QStringValueProperty(EObject context, QStringValueProperty semanticObject) {
		if(errorAcceptor != null) {
			if(transientValues.isValueTransient(semanticObject, QonDslPackage.Literals.QPROPERTY__PROPERTY_NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, QonDslPackage.Literals.QPROPERTY__PROPERTY_NAME));
			if(transientValues.isValueTransient(semanticObject, QonDslPackage.Literals.QSTRING_VALUE_PROPERTY__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, QonDslPackage.Literals.QSTRING_VALUE_PROPERTY__VALUE));
		}
		INodesForEObjectProvider nodes = createNodeProvider(semanticObject);
		SequenceFeeder feeder = createSequencerFeeder(semanticObject, nodes);
		feeder.accept(grammarAccess.getQStringValuePropertyAccess().getPropertyNameIDTerminalRuleCall_0_0(), semanticObject.getPropertyName());
		feeder.accept(grammarAccess.getQStringValuePropertyAccess().getValueSTRINGTerminalRuleCall_2_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Constraint:
	 *     link=[QObject|STRING]
	 */
	protected void sequence_SchemaProperty(EObject context, SchemaProperty semanticObject) {
		if(errorAcceptor != null) {
			if(transientValues.isValueTransient(semanticObject, QonDslPackage.Literals.SCHEMA_PROPERTY__LINK) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, QonDslPackage.Literals.SCHEMA_PROPERTY__LINK));
		}
		INodesForEObjectProvider nodes = createNodeProvider(semanticObject);
		SequenceFeeder feeder = createSequencerFeeder(semanticObject, nodes);
		feeder.accept(grammarAccess.getSchemaPropertyAccess().getLinkQObjectSTRINGTerminalRuleCall_3_0_1(), semanticObject.getLink());
		feeder.finish();
	}
}
