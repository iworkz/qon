/**
 * generated by Xtext
 */
package org.iworkz.qon.scoping;

import com.google.common.base.Objects;
import com.google.inject.Inject;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EReference;
import org.eclipse.xtext.scoping.IScope;
import org.eclipse.xtext.scoping.Scopes;
import org.eclipse.xtext.scoping.impl.AbstractDeclarativeScopeProvider;
import org.eclipse.xtext.xbase.lib.Extension;
import org.iworkz.qon.helper.SchemaHelper;
import org.iworkz.qon.naming.QonSimpleNameProvider;
import org.iworkz.qon.qonDsl.QObject;
import org.iworkz.qon.qonDsl.QObjectArrayProperty;
import org.iworkz.qon.qonDsl.QProperty;

/**
 * This class contains custom scoping description.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#scoping
 * on how and when to use it.
 */
@SuppressWarnings("all")
public class QonDslScopeProvider extends AbstractDeclarativeScopeProvider {
  @Inject
  private QonSimpleNameProvider nameProvider;
  
  @Inject
  @Extension
  private SchemaHelper schemaHelper;
  
  public IScope scope_QObject_type(final QObject it, final EReference eRef) {
    final QObject schema = this.schemaHelper.getSchemaObject(it);
    boolean _notEquals = (!Objects.equal(schema, null));
    if (_notEquals) {
      EList<QProperty> _properties = schema.getProperties();
      for (final QProperty attr : _properties) {
        if ((attr instanceof QObjectArrayProperty)) {
          String _propertyName = ((QObjectArrayProperty)attr).getPropertyName();
          boolean _equals = Objects.equal("types", _propertyName);
          if (_equals) {
            EList<QObject> _values = ((QObjectArrayProperty)attr).getValues();
            final IScope result = Scopes.<EObject>scopeFor(_values, this.nameProvider, IScope.NULLSCOPE);
            return result;
          }
        }
      }
    }
    return null;
  }
}
